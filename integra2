package hus.oop.integration;

public class MidpointRule implements MyIntegrator {
    private double precision;
    private int maxIterations;

    public MidpointRule(double precision, int maxIterations) {
        this.precision = precision;
        this.maxIterations = maxIterations;
    }

    @Override
    public double integrate(MyPolynomial polynomial, double lower, double upper) {
        int n = 4;
        double previous = integrate(polynomial, lower, upper, n);
        int count = 0;

        while (count < maxIterations) {
            n *= 2;
            double current = integrate(polynomial, lower, upper, n);
            if (Math.abs(current - previous) / 3.0 < precision) {
                return current;
            }
            previous = current;
            count++;
        }
        return previous;
    }

    private double integrate(MyPolynomial polynomial, double lower, double upper, int numOfSubIntervals) {
        double h = (upper - lower) / numOfSubIntervals;
        double sum = 0.0;

        for (int i = 0; i < numOfSubIntervals; i++) {
            double mid = lower + (i + 0.5) * h;
            sum += polynomial.evaluate(mid);
        }

        return sum * h;
    }
}
