package hus.oop.integration;

public class MyArrayPolynomial extends MyAbstractPolynomial {
    private static final int DEFAULT_CAPACITY = 8;
    private double[] coefficents;
    private int size;

    public MyArrayPolynomial() {
        coefficents = new double[DEFAULT_CAPACITY];
        size = 0;
    }

    @Override
    public double coefficient(int index) {
        if (index < size) {
            return coefficents[index];
        }
        return 0;
    }

    @Override
    public double[] coefficients() {
        double[] result = new double[size];
        System.arraycopy(coefficents, 0, result, 0, size);
        return result;
    }

    @Override
    public MyArrayPolynomial append(double coefficient) {
        if (size == coefficents.length) {
            allocateMore();
        }
        coefficents[size++] = coefficient;
        return this;
    }

    @Override
    public MyArrayPolynomial add(double coefficient, int index) {
        if (index >= coefficents.length) {
            while (index >= coefficents.length) allocateMore();
        }
        if (index >= size) {
            size = index + 1;
        }
        coefficents[index] += coefficient;
        return this;
    }

    @Override
    public MyArrayPolynomial set(double coefficient, int index) {
        if (index >= coefficents.length) {
            while (index >= coefficents.length) allocateMore();
        }
        if (index >= size) {
            size = index + 1;
        }
        coefficents[index] = coefficient;
        return this;
    }

    @Override
    public int degree() {
        return size - 1;
    }

    @Override
    public double evaluate(double x) {
        double result = 0;
        for (int i = size - 1; i >= 0; i--) {
            result = result * x + coefficents[i];
        }
        return result;
    }

    @Override
    public MyArrayPolynomial derivative() {
        MyArrayPolynomial result = new MyArrayPolynomial();
        for (int i = 1; i < size; i++) {
            result.append(i * coefficents[i]);
        }
        return result;
    }

    @Override
    public MyArrayPolynomial plus(MyPolynomial right) {
        MyArrayPolynomial result = new MyArrayPolynomial();
        int max = Math.max(this.degree(), right.degree());
        for (int i = 0; i <= max; i++) {
            result.append(this.coefficient(i) + right.coefficient(i));
        }
        return result;
    }

    @Override
    public MyArrayPolynomial minus(MyPolynomial right) {
        MyArrayPolynomial result = new MyArrayPolynomial();
        int max = Math.max(this.degree(), right.degree());
        for (int i = 0; i <= max; i++) {
            result.append(this.coefficient(i) - right.coefficient(i));
        }
        return result;
    }

    @Override
    public MyArrayPolynomial multiply(MyPolynomial right) {
        int newDegree = this.degree() + right.degree();
        MyArrayPolynomial result = new MyArrayPolynomial();
        while (result.coefficents.length <= newDegree) result.allocateMore();
        for (int i = 0; i <= this.degree(); i++) {
            for (int j = 0; j <= right.degree(); j++) {
                double newCoef = result.coefficient(i + j) + this.coefficient(i) * right.coefficient(j);
                result.set(newCoef, i + j);
            }
        }
        return result;
    }

    private void allocateMore() {
        double[] newCoefficients = new double[coefficents.length * 2];
        System.arraycopy(coefficents, 0, newCoefficients, 0, coefficents.length);
        coefficents = newCoefficients;
    }
}
