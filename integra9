package hus.oop.integration;

public class TrapezoidRule implements MyIntegrator {
    private double precision;
    private int maxIterations;

    public TrapezoidRule(double precision, int maxIterations) {
        this.precision = precision;
        this.maxIterations = maxIterations;
    }

    @Override
    public double integrate(MyPolynomial polynomial, double lower, double upper) {
        int n = 4;
        double previous = integrate(polynomial, lower, upper, n);
        for (int i = 0; i < maxIterations; i++) {
            n *= 2;
            double current = integrate(polynomial, lower, upper, n);
            if (Math.abs(current - previous) / 3.0 < precision) {
                return current;
            }
            previous = current;
        }
        return previous;
    }

    private double integrate(MyPolynomial polynomial, double lower, double upper, int numOfSubIntervals) {
        double h = (upper - lower) / numOfSubIntervals;
        double sum = 0.5 * (polynomial.evaluate(lower) + polynomial.evaluate(upper));
        for (int i = 1; i < numOfSubIntervals; i++) {
            double x = lower + i * h;
            sum += polynomial.evaluate(x);
        }
        return h * sum;
    }
}
